@use '@sass-fairy/math/math.sass'; // contains additional unitless function
@use 'sass:color';
@use 'conf';
@use 'conf/fibonacci';
@use 'func';
@use 'deliveryTo';
@use 'brand';
@use 'sivcev';

.header {
	&__container {
		display: grid;
		grid-auto-flow: column;
		align-items: center;

		@media (max-width: #{conf.$xs - 1}) {
			grid-template-columns: 1fr;
			grid-template-rows: math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__brand
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__hr--first
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__deliveryTo
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__hr--last
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__target
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__address
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__actions
				math.div(conf.$grid-gutter-width, 2); // 1rem || ~16px
			grid-template-areas:
				'.                 '
				'header__brand     '
				'.                 '
				'header__hr--first '
				'.                 '
				'header__deliveryTo'
				'.                 '
				'header__hr--last  '
				'.                 '
				'header__target    '
				'.                 '
				'header__address   '
				'.                 '
				'header__actions   '
				'.                 ';
		}

		@media (min-width: conf.$xs) and (max-width: #{conf.$s - 1}) {
			grid-template-columns:
				1fr
				auto
				math.div(conf.$grid-gutter-width, 2)
				auto
				1fr;
			grid-template-rows: math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__brand
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__hr--first
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__deliveryTo
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__hr--last
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__target + header__address
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__actions
				math.div(conf.$grid-gutter-width, 2); // 1rem || ~16px
			grid-template-areas:
				'.                  .                  .                  .                  .                 '
				'.                  header__brand      header__brand      header__brand      .                 '
				'.                  .                  .                  .                  .                 '
				'header__hr--first  header__hr--first  header__hr--first  header__hr--first  header__hr--first '
				'.                  .                  .                  .                  .                 '
				'header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo'
				'.                  .                  .                  .                  .                 '
				'header__hr--last   header__hr--last   header__hr--last   header__hr--last   header__hr--last  '
				'.                  .                  .                  .                  .                 '
				'.                  header__target     .                  header__address    .                 '
				'.                  .                  .                  .                  .                 '
				'header__actions    header__actions    header__actions    header__actions    header__actions   '
				'.                  .                  .                  .                  .                 ';
		}

		@media (min-width: conf.$s) {
			grid-template-columns:
				1fr // header__brand + header__hr--first + header__deliveryTo + header__hr--last
				auto // header__brand + header__hr--first + header__deliveryTo + header__hr--last + header__target
				math.div(conf.$grid-gutter-width, 2)
				auto // header__brand + header__hr--first + header__deliveryTo + header__hr--last + header__address
				math.div(conf.$grid-gutter-width, 2)
				auto // header__brand + header__hr--first + header__deliveryTo + header__hr--last + header__actions
				1fr; // header__brand + header__hr--first + header__deliveryTo + header__hr--last
			grid-template-rows: math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__brand
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__hr--first
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__deliveryTo
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__hr--last
				math.div(conf.$grid-gutter-width, 2) // 1rem || ~16px
				auto // header__target + header__address + header__actions
				math.div(conf.$grid-gutter-width, 2); // 1rem || ~16px
			grid-template-areas:
				'.                  .                  .                  .                  .                  .                  .                 '
				'header__brand      header__brand      header__brand      header__brand      header__brand      header__brand      header__brand     '
				'.                  .                  .                  .                  .                  .                  .                 '
				'header__hr--first  header__hr--first  header__hr--first  header__hr--first  header__hr--first  header__hr--first  header__hr--first '
				'.                  .                  .                  .                  .                  .                  .                 '
				'header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo'
				'.                  .                  .                  .                  .                  .                  .                 '
				'header__hr--last   header__hr--last   header__hr--last   header__hr--last   header__hr--last   header__hr--last   header__hr--last  '
				'.                  .                  .                  .                  .                  .                  .                 '
				'.                  header__target     .                  header__address    .                  header__actions    .                 '
				'.                  .                  .                  .                  .                  .                  .                 ';
		}

		@media (max-width: #{conf.$m - 1}) {
			justify-items: center;
		}

		@media (min-width: conf.$m) and (max-width: #{conf.$l - 1}) {
			grid-template-columns:
				auto // header__brand + header__deliveryTo
				math.div(conf.$grid-gutter-width, 2) // ~16px
				auto // header__hr--first + header__deliveryTo
				math.div(conf.$grid-gutter-width, 2) // ~16px
				1fr
				auto // header__target + header__deliveryTo
				1fr
				math.div(conf.$grid-gutter-width, 2) // ~16px
				auto // header__hr--last + header__deliveryTo
				math.div(conf.$grid-gutter-width, 2) // ~16px
				1fr
				auto // header__address + header__deliveryTo
				1fr
				math.div(conf.$grid-gutter-width, 2) // ~16px
				auto; // header__actions + header__deliveryTo
			grid-template-rows: math.div(conf.$grid-gutter-width, 2) // ~16px
				auto // header__brand + header__target + header__address + header__actions
				math.div(conf.$grid-gutter-width, 2) // ~16px
				math.div(conf.$grid-gutter-width, 2) // ~16px
				auto // header__deliveryTo
				math.div(conf.$grid-gutter-width, 2); // ~16px
			grid-template-areas:
				'.                  .                  header__hr--first  .                  .                  .                  .                  .                  header__hr--last   .                  .                  .                  .                  .                  .                 '
				'header__brand      .                  header__hr--first  .                  .                  header__target     .                  .                  header__hr--last   .                  .                  header__address    .                  .                  header__actions   '
				'.                  .                  header__hr--first  .                  .                  .                  .                  .                  header__hr--last   .                  .                  .                  .                  .                  .                 '
				'.                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                 '
				'header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo header__deliveryTo'
				'.                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                  .                 ';
		}

		@media (min-width: conf.$l) and (max-width: #{conf.$xl - 1}) {
			grid-template-columns:
				func.fluid(0, 43px, conf.$l, conf.$xl) // from 0 to ~43px
				auto // header__brand
				func.fluid(16px, 14px, conf.$l, conf.$xl) // from ~14px to ~16px
				clamp(1px, #{math.div(1, 16) + rem}, 3px) // header__hr--first ~1px
				func.fluid(16px, 30px, conf.$l, conf.$xl) // from 0 to ~30px
				auto // header__deliveryTo
				math.div(16, 16) + rem // 1rem || ~32px
				6fr
				minmax(math.div(214, 16) + rem, auto) // header__target
				1fr
				math.div(16, 16) + rem // 1rem || ~32px
				clamp(1px, #{math.div(1, 16) + rem}, 3px) // header__hr--last ~ 1px
				math.div(16, 16) + rem //1rem || ~32px
				4fr
				auto // header__address
				2fr
				math.div(16, 16) + rem // 1rem || ~16px
				auto; // header__actions
			grid-template-rows:
				math.div(18, 16) + rem // ~18px
				auto
				math.div(16, 16) + rem; // ~16px
		}

		@media (min-width: conf.$l) {
			grid-template-areas:
				'. .             . header__hr--first . .                  . . .              . . header__hr--last . . header__address . . header__actions'
				'. header__brand . header__hr--first . header__deliveryTo . . header__target . . header__hr--last . . header__address . . header__actions'
				'. .             . header__hr--first . .                  . . .              . . header__hr--last . . header__address . . header__actions';
		}

		@media (min-width: conf.$xl) {
			grid-template-columns:
				math.div(43, 16) + rem // ~43px
				auto // header__brand
				math.div(14, 16) + rem // ~14px
				clamp(1px, #{math.div(1, 16) + rem}, 3px) // header__hr--first ~1px
				math.div(30, 16) + rem // ~30px
				auto // header__deliveryTo
				math.div(16, 16) + rem // 1rem || ~32px
				6fr
				minmax(math.div(214, 16) + rem, auto) // header__target
				1fr
				math.div(16, 16) + rem // 1rem || ~32px
				clamp(1px, #{math.div(1, 16) + rem}, 3px) // header__hr--last ~ 1px
				math.div(16, 16) + rem //1rem || ~32px
				4fr
				auto // header__address
				2fr
				math.div(16, 16) + rem // 1rem || ~16px
				auto; // header__actions
			grid-template-rows:
				math.div(18, 16) + rem // ~18px
				auto
				math.div(16, 16) + rem; // ~16px
			grid-template-areas:
				'. .             . header__hr--first . .                  . . .              . . header__hr--last . . header__address . . header__actions'
				'. header__brand . header__hr--first . header__deliveryTo . . header__target . . header__hr--last . . header__address . . header__actions'
				'. .             . header__hr--first . .                  . . .              . . header__hr--last . . header__address . . header__actions';
		}
	}

	&__brand {
		grid-area: header__brand;
		display: flex;
		justify-content: center;
		transform: translateY(#{math.div(4, 56.3667) * -1em}); // ~-4px, 56.3667 height in the layout

		.icon {
			pointer-events: none;
			aspect-ratio: 110 / 31; // ~3,666666666666667
			max-width: 18rem;
			width: 100%;
			height: 100%;
		}

		@media (max-width: #{conf.$s - 1}) {
			justify-self: center;
		}

		@media (min-width: conf.$s) and (max-width: #{conf.$m - 1}) {
			.icon {
				// Smooth font-size change according to layout
				max-width: func.fluid(
					/* ~288px */ math.unitless(18rem) * conf.$font-size-root,
					/* ~200px */ math.unitless(12.5rem) * conf.$font-size-root,
					conf.$s,
					conf.$m
				);
			}
		}

		@media (min-width: conf.$m) {
			min-width: 12.5rem; // ~200px
			max-width: 12.5rem; // ~200px
		}
	}

	&__hr {
		background-color: conf.$wild-sand;
		border: 0;
		box-sizing: border-box;
		margin: 0;

		@media (max-width: #{conf.$m - 1}) {
			width: 100%;
		}

		@media (max-width: #{conf.$m - 1}) {
			height: clamp(1px, #{math.div(1, 16) + rem}, 3px); // ~1px - 3px
		}

		@media (min-width: conf.$m) {
			height: 100%;
			width: clamp(1px, #{math.div(1, 16) + rem}, 3px); // ~1px - 3px
		}

		&:first-of-type {
			grid-area: header__hr--first;
		}

		&:last-of-type {
			grid-area: header__hr--last;
		}
	}

	&__deliveryTo {
		grid-area: header__deliveryTo;

		@media (min-width: conf.$xs) and (max-width: #{conf.$m - 1}) {
			align-items: center;
		}

		.deliveryTo {
			&__hr {
				@media (max-width: #{conf.$m - 1}) {
					background-color: conf.$wild-sand;
				}
			}
		}
	}

	&__target {
		$target: &;
		text-align: start;
		grid-area: header__target;
		font-size: math.div(14, 16) + rem;
		min-height: math.div(52, 16) + rem;
		color: conf.$body-color;

		@media (min-width: conf.$l) {
			max-width: math.div(214, 16) + rem; // ~214px
		}

		&-overflow {
			&:empty {
				&::before {
					font-weight: 300;
					font-style: italic;
					content: 'Button text not seted';

					@at-root :root[lang='ru'] & {
						content: 'Текст кнопки не задан';
					}
				}
			}
		}

		&-icon {
			color: conf.$atlantis;
		}

		&:hover,
		&:active {
			#{$target} {
				&-icon {
					color: conf.$body-bg;
				}
			}
		}

		&:any-link {
			text-decoration: none;

			&:hover,
			&:active {
				text-decoration: none;
			}

			&:visited {
				color: conf.$atlantis;
			}
		}
	}

	&__address {
		grid-area: header__address;
		display: flex;
		margin: 0;
		column-gap: math.div(conf.$grid-gutter-width, 2); // ~16px
		padding-top: math.div(1, 16) + rem; // ~1px
		transform: translateY(math.div(2, 16) + rem); // ~2px

		@media (max-width: #{conf.$xs - 1}) {
			justify-content: center;
		}

		@media (min-width: #{conf.$xs}) {
			flex-direction: column;
			align-items: end;
		}

		&-phone {
			text-align: end;
			color: conf.$body-color;
			font-weight: 700;
			font-size: math.div(18, 16) + rem; // ~18px
			overflow: hidden;
			display: -webkit-box;
			-webkit-line-clamp: 1;
			-webkit-box-orient: vertical;
			text-overflow: ellipsis;
			word-break: break-all;
			line-height: 1.3;
			min-height: calc(1em * 1.3);

			&:empty {
				&::before {
					font-style: italic;
					font-weight: 300;
					content: 'Phone not seted';

					@at-root :root[lang='ru'] & {
						content: 'Телефон не задан';
					}
				}
			}

			&:hover,
			&:active {
				text-decoration: none;
				color: conf.$body-color;
			}

			&:visited {
				color: conf.$body-color;
			}
		}

		&-callback {
			text-align: end;
			font-size: math.div(14, 16) + rem; // ~14px
			min-height: math.div(23, 14) + em; // ~23px
			color: conf.$atlantis;
			text-decoration: underline dashed conf.$atlantis;
			text-underline-offset: math.div(5, 14) + em; // ~5px
			text-decoration-thickness: math.div(1, 14) + em; // ~1px
			padding: 0;
			// line-height: conf.$line-height-sm;

			span {
				display: -webkit-box;
				-webkit-line-clamp: 1;
				-webkit-box-orient: vertical;
				text-overflow: ellipsis;
				word-break: break-all;
				overflow: hidden;

				&:empty {
					&::before {
						font-weight: 300;
						font-style: italic;
						content: 'Text not seted';

						@at-root :root[lang='ru'] & {
							content: 'Текст не задан';
						}
					}
				}
			}

			&:hover,
			&:active {
				color: conf.$atlantis;
				text-decoration: none;
				border-bottom-color: transparent;
			}
		}
	}

	&__actions {
		grid-area: header__actions;
		padding-top: math.div(15, 16) + em;

		&-row {
			display: flex;
			align-items: center;

			@media (max-width: #{conf.$s - 1}) {
				justify-content: center;
			}

			&:not(:empty) {
				margin: math.div(19, 16) * -1rem;
			}
		}

		&-col {
			padding: math.div(19, 16) * 1rem;
		}
	}

	&__action {
		$action: &;
		position: relative;
		display: flex;
		padding: 0;
		align-items: center;
		font-size: 0;
		line-height: 0;
		border: 0;
		background: none;

		@media (prefers-reduced-motion: no-preference) {
			transition-property: color;
			transition-duration: var(--animation-duration);
			transition-timing-function: var(--animation-timing-function);
		}

		&:any-link {
			text-decoration: none;

			&:hover,
			&:focus {
				text-decoration: none;
			}
		}

		&-icon {
			font-size: 1rem;
			pointer-events: none; // Preserve svg title show on hover
		}

		&-badge {
			font-size: math.div(12, 16) + rem; // ~12px
			position: absolute;
			top: math.div(-12, 12) + em; // 1em || ~ 12px

			.badge__overflow {
				&:empty {
					&::before {
						font-style: italic;
						font-weight: 300;
						content: '?';
					}
				}
			}

			// Left-To-Right
			@at-root :root:not([dir='rtl']) & {
				right: -1em;
			}

			// Right-To-Left
			@at-root :root[dir='rtl'] & {
				left: -1em;
			}
		}

		&--heart {
			color: conf.$mandy;

			#{$action} {
				&-icon {
					font-size: math.div(24, 16) + rem;
				}

				&-badge {
					top: math.div(-14, 12) + em; // ~ -14px

					// Left-To-Right
					@at-root :root:not([dir='rtl']) & {
						right: math.div(-18, 12) + em; // ~ -18px;
					}

					// Right-To-Left
					@at-root :root[dir='rtl'] & {
						left: math.div(-18, 12) + em; // ~ -18px;
					}
				}
			}

			&:hover,
			&:focus {
				color: darken(conf.$mandy, fibonacci.$asymp-l-percentage);
			}

			&:visited {
				color: conf.$mandy;
			}
		}

		&--shoping-cart {
			color: conf.$body-color;

			#{$action} {
				&-icon {
					font-size: math.div(28, 16) + rem;
				}

				&-badge {
					top: math.div(-12, 12) + em; // ~ -14px

					// Left-To-Right
					@at-root :root:not([dir='rtl']) & {
						right: math.div(-14, 12) + em; // ~ -14px;
					}

					// Right-To-Left
					@at-root :root[dir='rtl'] & {
						left: math.div(-14, 12) + em; // ~ -14px;
					}
				}
			}

			&:hover,
			&:focus {
				color: darken(conf.$body-color, fibonacci.$asymp-l-percentage);
			}

			&:visited {
				color: conf.$body-color;
			}
		}
	}
}

@use '@sass-fairy/math/math.sass';
@use 'conf';
@use 'func';

.menu {
	display: flex;
	background-color: conf.$apple-2;
	min-height: math.div(70, 16) + rem;

	&__container {
		display: flex;
		align-items: center;

		@media (max-width: #{conf.$m - 1}) {
			flex-direction: column;
		}
	}

	&__nav {
		background-color: conf.$apple;
		align-self: stretch;
		display: flex;
		align-items: center;
		justify-content: center;
		flex-grow: 1;
		padding-block: math.div(20, 16) + rem;
		position: relative;

		&::after {
			display: none;
			position: absolute;
			top: 0;
			bottom: 0;
			content: '';
			background-color: conf.$apple;

			@at-root :root:not([dir='rtl']) & {
				left: 100%;
			}

			@at-root :root[dir='rtl'] & {
				right: 100%;
			}
		}

		@media (max-width: #{conf.$xxxs - 1}) {
			&::after {
				display: block;
				width: conf.$container-padding-x;
			}
		}

		@media (min-width: conf.$xxxs) and (max-width: #{conf.$m - 1}) {
			&::after {
				width: calc((100vw - 100%) / 2);
				display: block;
			}
		}

		&::before {
			content: '';
			position: absolute;
			top: 0;
			bottom: 0;
			background-color: conf.$apple;

			@media (max-width: #{conf.$xxxs - 1}) {
				width: conf.$container-padding-x;
			}

			@media (min-width: conf.$xxxs) {
				width: calc((100vw - 100%) / 2);
			}

			@at-root :root:not([dir='rtl']) & {
				right: 100%;
			}

			@at-root :root[dir='rtl'] & {
				left: 100%;
			}
		}
	}

	&__list {
		display: flex;
		// align-items: center;
		margin: 0;
		padding: 0;

		@media (max-width: #{conf.$xxs - 1}) {
			flex-direction: column;
		}

		@media (min-width: conf.$xxs) and (max-width: #{conf.$m - 1}) {
			flex-wrap: wrap;
			justify-content: center;
		}

		@media (max-width: #{conf.$m - 1}) {
			row-gap: math.div(conf.$grid-gutter-width, 4);
			column-gap: math.div(conf.$grid-gutter-width, 2);
		}
	}

	&__item {
		display: flex;
		flex-direction: column;
		// align-items: center;
		justify-content: center;
		color: conf.$white;
		font-size: 1rem;
		line-height: math.div(22, 16) + em;
		font-weight: 400;
		// max-width: 100px;
		min-height: math.div(30, 16) + em;

		@media (min-width: conf.$xxs) and (max-width: #{conf.$s - 1}) {
			max-width: calc(
				100% / 2 - #{math.div(math.unitless(math.div(conf.$grid-gutter-width, 2)) * conf.$font-size-root, 2)}
			);
		}

		@media (min-width: conf.$s) and (max-width: #{conf.$m - 1}) {
			max-width: calc(
				100% / 3 - #{math.div(math.unitless(math.div(conf.$grid-gutter-width, 2)) * conf.$font-size-root, 2)}
			);
		}

		@media (min-width: conf.$m) {
			flex-grow: 1;

			& + & {
				border-inline-start: 1px solid conf.$apple-3;
				padding-inline: math.div(8, 16) + em;
			}
		}

		@media (min-width: conf.$m) and (max-width: #{conf.$xl}) {
			padding-inline-end: func.fluid(8px, 28px, conf.$m, conf.$xl);

			& + & {
				padding-inline: func.fluid(8px, 28px, conf.$m, conf.$xl);
			}
		}

		@media (min-width: conf.$xl) {
			padding-inline-end: math.div(28, 16) + em;

			& + & {
				padding-inline: math.div(28, 16) + em;
			}
		}
	}

	&__link {
		color: conf.$white;
		text-decoration: none;
		overflow: hidden;
		display: -webkit-box;
		-webkit-line-clamp: 1;
		-webkit-box-orient: vertical;
		text-overflow: ellipsis;
		// word-break: break-all;

		@media (min-width: conf.$m) and (max-width: #{conf.$xl - 1}) {
			-webkit-line-clamp: 2;
		}

		@media (min-width: conf.$xl) {
			-webkit-line-clamp: 1;
		}

		&:empty {
			&::before {
				word-break: normal;
				font-weight: 300;
				font-style: italic;
				content: 'Text not seted';

				@at-root :root[lang='ru'] & {
					content: 'Текст не задан';
				}
			}
		}

		&:hover {
			color: conf.$white;
			text-decoration: underline;
		}
	}

	&__search {
		$search: &;
		display: flex;
		position: relative;
		align-self: stretch;
		flex-shrink: 0;

		@media (max-width: #{conf.$m - 1}) {
			min-height: math.div(50, 16) + rem;
		}

		&-label {
			font-size: math.div(24, 16) + rem;
		}

		&-control {
			border: 0;
			height: auto;
			color: conf.$white;
			padding-inline: 1rem 2rem;

			@media (prefers-reduced-motion: no-preference) {
				transition-property: transform, width;
				transition-duration: var(--animation-duration);
				transition-timing-function: var(--animation-timing-function);
			}

			@media (min-width: conf.$m) {
				width: math.div(60, 16) + rem;
			}

			&:valid {
				padding-inline-end: 3rem;

				@media (min-width: conf.$m) {
					width: math.div(196, 16) + rem;
				}

				+ #{$search} {
					&-label {
						@at-root :root:not([dir='rtl']) & {
							transform: translate(-100%, -50%);
						}

						@at-root :root[dir='rtl'] & {
							transform: translate(100%, -50%);
						}
					}
				}
			}

			&:focus {
				background: none;
				color: conf.$white;
				padding-inline-end: 3rem;

				@media (min-width: conf.$m) {
					width: math.div(196, 16) + rem;
				}

				+ #{$search} {
					&-label {
						@at-root :root:not([dir='rtl']) & {
							transform: translate(-50%, -50%);
						}

						@at-root :root[dir='rtl'] & {
							transform: translate(50%, -50%);
						}
					}
				}
			}
		}

		&-label {
			position: absolute;
			color: conf.$white;
			margin: 0;
			line-height: 0;
			top: 50%;
			transform: translate(0, -50%);
			pointer-events: none;

			@media (prefers-reduced-motion: no-preference) {
				transition-property: transform, width;
				transition-duration: var(--animation-duration);
				transition-timing-function: var(--animation-timing-function);
			}

			@at-root :root:not([dir='rtl']) & {
				right: 0;
			}

			@at-root :root[dir='rtl'] & {
				left: 0;
			}
		}
	}
}

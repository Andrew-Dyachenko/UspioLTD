@use '../conf';
@use '../bootstrap/bootstrap-import--fvm' as bootstrap;

// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.btn {
	display: inline-block;
	font-family: bootstrap.$btn-font-family;
	font-weight: bootstrap.$btn-font-weight;
	color: bootstrap.$body-color;
	text-align: center;
	text-decoration: if(bootstrap.$link-decoration == none, null, none);
	white-space: bootstrap.$btn-white-space;
	vertical-align: middle;
	user-select: none;
	background-color: transparent;
	border: bootstrap.$btn-border-width solid transparent;
	@include button-size(
		bootstrap.$btn-padding-y,
		bootstrap.$btn-padding-x,
		bootstrap.$btn-font-size,
		bootstrap.$btn-line-height,
		bootstrap.$btn-border-radius
	);
	@include transition(bootstrap.$btn-transition);

	@include hover() {
		color: bootstrap.$body-color;
		text-decoration: none;
	}

	&:focus,
	&.focus {
		outline: 0;
		box-shadow: bootstrap.$btn-focus-box-shadow;
	}

	// Disabled comes first so active can properly restyle
	&.disabled,
	&:disabled {
		opacity: bootstrap.$btn-disabled-opacity;
		@include box-shadow(none);
	}

	&:not(:disabled):not(.disabled) {
		cursor: if(bootstrap.$enable-pointer-cursor-for-buttons, pointer, null);

		&:active,
		&.active {
			@include box-shadow(bootstrap.$btn-active-box-shadow);

			&:focus {
				@include box-shadow(bootstrap.$btn-focus-box-shadow, bootstrap.$btn-active-box-shadow);
			}
		}
	}
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn {
	pointer-events: none;
}

//
// Alternate buttons
//

// Custom buttons colors START
@each $color, $value in conf.$button-colors {
	.btn-#{$color} {
		@include button-variant($value, $value);
	}
}

@each $color, $value in conf.$button-colors {
	.btn-outline-#{$color} {
		@include button-outline-variant($value);
	}
}
// Custom buttons colors END

//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
	font-weight: bootstrap.$font-weight-normal;
	color: bootstrap.$link-color;
	text-decoration: bootstrap.$link-decoration;

	@include hover() {
		color: bootstrap.$link-hover-color;
		text-decoration: bootstrap.$link-hover-decoration;
	}

	&:focus,
	&.focus {
		text-decoration: bootstrap.$link-hover-decoration;
	}

	&:disabled,
	&.disabled {
		color: bootstrap.$btn-link-disabled-color;
		pointer-events: none;
	}

	// No need for an active state here
}

//
// Button Sizes
//

.btn-lg {
	@include button-size(
		bootstrap.$btn-padding-y-lg,
		bootstrap.$btn-padding-x-lg,
		bootstrap.$btn-font-size-lg,
		bootstrap.$btn-line-height-lg,
		bootstrap.$btn-border-radius-lg
	);
}

.btn-sm {
	@include button-size(
		bootstrap.$btn-padding-y-sm,
		bootstrap.$btn-padding-x-sm,
		bootstrap.$btn-font-size-sm,
		bootstrap.$btn-line-height-sm,
		bootstrap.$btn-border-radius-sm
	);
}

//
// Block button
//

.btn-block {
	display: block;
	width: 100%;

	// Vertically space out multiple block buttons
	+ .btn-block {
		margin-top: bootstrap.$btn-block-spacing-y;
	}
}

// Specificity overrides
input[type='submit'],
input[type='reset'],
input[type='button'] {
	&.btn-block {
		width: 100%;
	}
}

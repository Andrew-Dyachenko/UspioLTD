@use '@sass-fairy/math/math.sass';
@use 'sass:string';
@use 'conf';
@use 'func';

.hero {
	background-color: conf.$wild-sand;

	&__container {
		display: grid;

		@media (max-width: #{conf.$m - 1}) {
			grid-template-columns: 1fr;
			grid-template-rows:
				math.div(20, 16) + rem
				auto
				math.div(20, 16) + rem
				auto
				math.div(20, 16) + rem
				auto
				math.div(40, 16) + rem;
			grid-template-areas:
				'.                '
				'hero__breadcrumbs'
				'.                '
				'hero__media      '
				'.                '
				'hero__infoblock  '
				'.                ';
		}

		@media (min-width: conf.$m) {
			grid-template-areas:
				'.                 . hero__media'
				'hero__breadcrumbs . hero__media'
				'.                 . hero__media'
				'hero__infoblock   . hero__media'
				'.                 . hero__media';
		}

		@media (min-width: conf.$m) and (max-width: #{conf.$xl - 1}) {
			grid-template-columns:
				calc(
					func.fluid(
							math.div(
								conf.$m - func.strip-unit(conf.$container-padding-x) * conf.$font-size-root * 2,
								2
							),
							(conf.$xl - func.strip-unit(conf.$container-padding-x) * conf.$font-size-root * 2) -
								func.strip-unit(25rem) * conf.$font-size-root,
							conf.$m,
							conf.$xl
						) -
						func.fluid(
							func.strip-unit(math.div(20, 16) + 0rem) * conf.$font-size-root,
							func.strip-unit(2.625rem) * conf.$font-size-root,
							conf.$m,
							conf.$xl
						) / 2
				)
				func.fluid(
					func.strip-unit(math.div(20, 16) + 0rem) * conf.$font-size-root,
					func.strip-unit(2.625rem) * conf.$font-size-root,
					conf.$m,
					conf.$xl
				)
				calc(
					func.fluid(
							math.div(
								conf.$m - func.strip-unit(conf.$container-padding-x) * conf.$font-size-root * 2,
								2
							),
							func.strip-unit(25rem) * conf.$font-size-root,
							conf.$m,
							conf.$xl
						) -
						func.fluid(
							func.strip-unit(math.div(20, 16) + 0rem) * conf.$font-size-root,
							func.strip-unit(2.625rem) * conf.$font-size-root,
							conf.$m,
							conf.$xl
						) / 2
				);
			grid-template-rows:
				math.div(20, 16) + rem
				auto
				func.fluid(
					func.strip-unit(math.div(20, 16) + 0rem) * conf.$font-size-root,
					func.strip-unit(math.div(30, 16) + 0rem) * conf.$font-size-root,
					conf.$m,
					conf.$xl
				)
				1fr
				math.div(60, 16) + rem;
		}

		@media (min-width: conf.$xl) {
			grid-template-columns:
				1fr
				math.div(46, 16) + rem
				25rem;
			grid-template-rows:
				math.div(20, 16) + rem
				auto
				math.div(30, 16) + rem
				1fr
				math.div(60, 16) + rem;
		}
	}

	&__breadcrumbs {
		grid-area: hero__breadcrumbs;
	}

	&__infoblock {
		grid-area: hero__infoblock;

		&:first-child {
			margin-block-start: 0;
		}

		&:last-child {
			margin-block-end: 0;
		}
	}

	&__title {
		$-fs-min: 2rem;
		$-fs-max: math.div(42, 16) + 0rem;
		$-margin-min: 2rem;
		$-margin-max: math.div(60, 16) + 0rem;

		margin: 0;
		font-weight: 700;
		line-height: math.div(50, 42);
		font-size: $-fs-min;
		text-align: start;

		&:not(:empty) {
			&:not(:first-child) {
				margin-block-start: $-margin-min;
			}

			&:not(:last-child) {
				margin-block-end: $-margin-min;
			}
		}

		@media (max-width: #{conf.$m - 1}) {
			text-align: center;
		}

		@media (min-width: conf.$m) and (max-width: #{conf.$xl - 1}) {
			font-size: func.fluid(
				func.strip-unit($-fs-min) * conf.$font-size-root,
				func.strip-unit($-fs-max) * conf.$font-size-root,
				conf.$m,
				conf.$xl
			);

			&:not(:empty) {
				&:not(:first-child) {
					margin-block-start: func.fluid(
						func.strip-unit($-margin-min) * conf.$font-size-root,
						func.strip-unit($-margin-max) * conf.$font-size-root,
						conf.$m,
						conf.$xl
					);
				}

				&:not(:last-child) {
					margin-block-end: func.fluid(
						func.strip-unit($-margin-min) * conf.$font-size-root,
						func.strip-unit($-margin-max) * conf.$font-size-root,
						conf.$m,
						conf.$xl
					);
				}
			}
		}

		@media (min-width: conf.$xl) {
			font-size: $-fs-max;

			&:not(:empty) {
				&:not(:first-child) {
					margin-block-start: $-margin-max;
				}

				&:not(:last-child) {
					margin-block-end: $-margin-max;
				}
			}
		}

		&-mark {
			background: none;
			padding: 0;
			color: conf.$atlantis-2;
		}

		&-overflow {
			@media (min-width: conf.$m) {
				overflow: hidden;
				display: -webkit-box;
				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
				text-overflow: ellipsis;
			}
		}
	}

	&__text {
		@media (min-width: conf.$m) {
			&:not(:empty) {
				&:not(:first-child) {
					margin-block-start: 1rem;
				}

				&:not(:last-child) {
					margin-block-end: 1rem;
				}
			}
		}
	}

	&__paragraph,
	&__blockquote {
		margin: 0;
		font-size: 1rem;
		line-height: math.div(22, 16) + em;

		@media (max-width: #{conf.$m - 1}) {
			text-align: center;
		}

		@media (min-width: conf.$m) {
			overflow: hidden;
			display: -webkit-box;
			-webkit-box-orient: vertical;
			text-overflow: ellipsis;
		}

		@media (min-width: conf.$m) and (max-width: #{conf.$l - 1}) {
			-webkit-line-clamp: 2;
		}

		@media (min-width: conf.$l) and (max-width: #{conf.$xl - 1}) {
			-webkit-line-clamp: 3;
		}

		@media (min-width: conf.$xl) {
			-webkit-line-clamp: 4;
		}

		&:not(:empty) {
			&:not(:first-child) {
				margin-block-start: math.div(22, 16) + em;
			}

			&:not(:last-child) {
				margin-block-end: math.div(22, 16) + em;
			}
		}
	}

	&__paragraph {
		color: conf.$oslo-gray-2;
	}

	&__blockquote {
		font-style: italic;
		line-height: math.div(22, 16) + em;
	}

	&__actions {
		display: flex;
		flex-wrap: wrap;
		gap: math.div(conf.$grid-gutter-width, 2);

		@media (max-width: #{conf.$m - 1}) {
			justify-content: center;
		}

		&:not(:empty) {
			&:not(:first-child) {
				margin-block-start: math.div(30, 16) + rem;
			}

			&:not(:last-child) {
				margin-block-end: math.div(30, 16) + rem;
			}
		}
	}

	&__action {
		justify-content: center;
		color: conf.$body-color;
		min-height: math.div(55, 16) + em;
		min-width: math.div(250, 16) + em;

		&-overflow {
			overflow: hidden;
			display: -webkit-box;
			-webkit-line-clamp: 1;
			-webkit-box-orient: vertical;
			text-overflow: ellipsis;
			word-break: break-all;

			&:empty {
				&::before {
					font-weight: 300;
					font-style: italic;
					content: 'Button text not seted';

					@at-root :root[lang='ru'] & {
						content: 'Текст кнопки не задан';
					}
				}
			}
		}

		&.btn_custom {
			min-height: math.div(55, 16) + em;
		}
	}

	&__media-wrapper {
		grid-area: hero__media;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;

		@media (max-width: #{conf.$m - 1}) {
			aspect-ratio: 4096 / 2734;
		}

		// @media (min-width: conf.$m) {
		// 	aspect-ratio: 400 / 509;
		// }
	}

	&__media {
		height: 100%;
		width: 100%;

		&-img {
			object-fit: cover;
			object-position: math.div(61, 4) * 1% center;
			width: 100%;
			height: 100%;
		}
	}
}
